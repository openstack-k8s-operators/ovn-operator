#!/bin//bash
#
# Copyright 2022 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Configs are obtained from ENV variables.
OvnBridge=${OvnBridge:-"br-int"}
OvnRemote=${OvnRemote:-"tcp:127.0.0.1:6642"}
OvnEncapType=${OvnEncapType:-"geneve"}
OvnAvailabilityZones=${OvnAvailabilityZones:-""}
EnableChassisAsGateway=${EnableChassisAsGateway:-true}
PhysicalNetworks=${PhysicalNetworks:-""}
OvnHostName=${OvnHostName:-""}

function wait_for_ovsdb_server {
    while true; do
        /usr/bin/ovs-vsctl show
        if [ $? -eq 0 ]; then
            break
        else
            echo "Ovsdb-server seems not be ready yet. Waiting..."
            sleep 1
        fi
    done
}

# configure external-ids in OVS
function configure_external_ids {
    ovs-vsctl set open . external-ids:ovn-bridge=${OvnBridge}
    ovs-vsctl set open . external-ids:ovn-remote=${OvnRemote}
    ovs-vsctl set open . external-ids:ovn-encap-type=${OvnEncapType}
    if [ -n "$OvnHostName" ]; then
        ovs-vsctl set open . external-ids:hostname=${OvnHostName}
    fi
    local cms_options=""
    if [ "$EnableChassisAsGateway" == "true" ]; then
        cms_options="enable-chassis-as-gw"
    fi
    if [ -n "$OvnAvailabilityZones" ]; then
        cms_options+=",availability-zones="$OvnAvailabilityZones
    fi
    if [ -n "${cms_options}" ]; then
        ovs-vsctl set open . external-ids:ovn-cms-options=${cms_options#,}
    else
        ovs-vsctl --if-exists remove open . external_ids ovn-cms-options
    fi
}

# Configure bridge mappings and physical bridges
function configure_physical_networks {

    set +ex

    # Add br-octavia if octavia is being deployed.
    (ip -br link show octavia > /dev/null 2>&1) && PhysicalNetworks="octavia $PhysicalNetworks"

    set -ex
    local OvnBridgeMappings=""
    for physicalNetwork in ${PhysicalNetworks}; do
        br_name="br-${physicalNetwork}"
        ovs-vsctl --may-exist add-br ${br_name}
        ovs-vsctl --may-exist add-port ${br_name} ${physicalNetwork}
        bridgeMapping="${physicalNetwork}:${br_name}"
        if [ -z "$OvnBridgeMappings"]; then
            OvnBridgeMappings=$bridgeMapping
        else
            OvnBridgeMappings="${OvnBridgeMappings},${bridgeMapping}"
        fi
    done
    if [ -n "$OvnBridgeMappings" ]; then
        ovs-vsctl set open . external-ids:ovn-bridge-mappings=${OvnBridgeMappings}
    else
        # If NicMappings not defined or cleared, let's ensure bridge and bridge-mappings are removed
        ovn_bms=$(ovs-vsctl --if-exists get open . external_ids:ovn-bridge-mappings|tr -d '"')
        for bm in ${ovn_bms/,/ }; do
            ovs-vsctl --if-exists del-br ${bm##*:}
        done
        ovs-vsctl --if-exists remove open . external_ids ovn-bridge-mappings

        # If NicMappings not defined or cleared, let's ensure patch ports are removed
        patch_ports=$(ovs-vsctl --columns=name --bare find interface type=patch)
        for port in ${patch_ports}; do
            ovs-vsctl --if-exists del-port br-int $port
        done
    fi
}
