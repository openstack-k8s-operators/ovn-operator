#!/bin//bash
#
# Copyright 2022 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Configs are obtained from ENV variables.
OVNBridge=${OVNBridge:-"br-int"}
OVNRemote=${OVNRemote:-"tcp:localhost:6642"}
OVNEncapType=${OVNEncapType:-"geneve"}
OVNAvailabilityZones=${OVNAvailabilityZones:-""}
EnableChassisAsGateway=${EnableChassisAsGateway:-true}
PhysicalNetworks=${PhysicalNetworks:-""}
OVNHostName=${OVNHostName:-""}
DB_FILE=/etc/openvswitch/conf.db

ovs_dir=/var/lib/openvswitch
FLOWS_RESTORE_SCRIPT=$ovs_dir/flows-script
FLOWS_RESTORE_DIR=$ovs_dir/saved-flows
SAFE_TO_STOP_OVSDB_SERVER_SEMAPHORE=$ovs_dir/is_safe_to_stop_ovsdb_server

# Variables declaration used by start-up optimization
ovs_vswitchd_pid_file=/var/run/openvswitch/ovs-vswitchd.pid
ovsdb_server_pid_file=/var/run/openvswitch/ovsdb-server.pid
update_semaphore_file=/var/lib/openvswitch/update
stop_vswitchd_script_file=/usr/local/bin/container-scripts/stop-vswitchd.sh
stop_ovsdb_server_script_file=/usr/local/bin/container-scripts/stop-ovsdb-server.sh
skip_ovsdb_server_stop_file=/var/lib/openvswitch/skip_stop_ovsdbserver
skip_vswitchd_stop_file=/var/lib/openvswitch/skip_stop_vswitchd

function cleanup_ovsdb_server_semaphore() {
    rm -f $SAFE_TO_STOP_OVSDB_SERVER_SEMAPHORE 2>&1 > /dev/null
}

function cleanup_flows_backup() {
    rm -f $FLOWS_RESTORE_SCRIPT 2>&1 > /dev/null
    rm -rf $FLOWS_RESTORE_DIR 2>&1 > /dev/null
}

function wait_for_ovsdb_server {
    while true; do
        /usr/bin/ovs-vsctl show
        if [ $? -eq 0 ]; then
            break
        else
            echo "ovsdb-server seems not be ready yet. Waiting..."
            sleep 1
        fi
    done
}

# configure external-ids in OVS
function configure_external_ids {
    ovs-vsctl set open . external-ids:ovn-bridge=${OVNBridge}
    ovs-vsctl set open . external-ids:ovn-remote=${OVNRemote}
    ovs-vsctl set open . external-ids:ovn-encap-type=${OVNEncapType}
    if [ -n "$OVNHostName" ]; then
        ovs-vsctl set open . external-ids:hostname=${OVNHostName}
    fi
    local cms_options=""
    if [ "$EnableChassisAsGateway" == "true" ]; then
        cms_options="enable-chassis-as-gw"
    fi
    if [ -n "$OVNAvailabilityZones" ]; then
        cms_options+=",availability-zones="$OVNAvailabilityZones
    fi
    if [ -n "${cms_options}" ]; then
        ovs-vsctl set open . external-ids:ovn-cms-options=${cms_options#,}
    else
        ovs-vsctl --if-exists remove open . external_ids ovn-cms-options
    fi
}

# Returns the set difference between $1 and $2
function set_difference {
    echo "$(comm -23 <(sort <(echo $1 | xargs -n1)) <(sort <(echo $2 | xargs -n1)))"
}

# Configure bridge mappings and physical bridges
function configure_physical_networks {
    local OVNBridgeMappings=""
    local br_new=""
    for physicalNetwork in ${PhysicalNetworks}; do
        br_name="br-${physicalNetwork}"
        bridgeMapping="${physicalNetwork}:${br_name}"
        if [ -z "$OVNBridgeMappings" ]; then
            OVNBridgeMappings=$bridgeMapping
            br_new=$br_name
        else
            OVNBridgeMappings="${OVNBridgeMappings},${bridgeMapping}"
            br_new="${br_new} ${br_name}"
        fi
    done

    # Current configured bridges.
    ovn_bms=$(ovs-vsctl --if-exists get open . external_ids:ovn-bridge-mappings|tr -d '"')
    local br_current=""
    for bm in ${ovn_bms/,/ }; do
        if [ -z "$br_current"]; then
            br_current=${bm##*:}
        else
            br_current="${br_current} ${bm##*:}"
        fi
    done

    # Bridges to add and delete.
    local br_to_delete=""
    local br_to_add=""
    br_to_delete=$(set_difference "$br_current" "$br_new")
    br_to_add=$(set_difference "$br_new" "$br_current")

    # Add the new bridges.
    for br_name in ${br_to_add}; do
        ovs-vsctl --may-exist add-br ${br_name}
        ovs-vsctl --may-exist add-port ${br_name} ${br_name#*-}
    done

    # Delete the old bridges not longer present in "OVNBridgeMappings" and the
    # patch ports in "br-int".
    for br_name in ${br_to_delete}; do
        # List all ports "type=patch", retrieve the "options:peer" parameter
        # and delete the peer port. The "$port" will be deleted during the
        # bridge deletion.
        #   $ ovs-vsctl --column=options --bare find interface name=patch-provnet1-to-br-int type=patch
        #     peer=patch-br-int-to-provnet1

        if ovs-vsctl br-exists ${br_name}; then
            for iface in $(ovs-vsctl list-ifaces ${br_name}); do
                port_type=$(ovs-vsctl --column=type --bare list interface ${iface})
                if [ "$port_type" == "patch" ]; then
                    peer=$(ovs-vsctl get interface ${iface} options:peer)
                    ovs-vsctl --if-exists del-port ${OVNBridge} ${peer}
                fi
            done
            ovs-vsctl --if-exists del-br ${br_name}
        fi
    done

    # Set or remove the local OVS Open vSwitch "external-ids:ovn-bridge-mappings"
    if [ -n "$OVNBridgeMappings" ]; then
        ovs-vsctl set open . external-ids:ovn-bridge-mappings=${OVNBridgeMappings}
    else
        ovs-vsctl --if-exists remove open . external_ids ovn-bridge-mappings
    fi

}

function wait_for_db_creation {
    while [ ! -s ${DB_FILE} ]; do
        echo "${DB_FILE} does not exist yet or is empty. Waiting..."
        sleep 1
    done
}
