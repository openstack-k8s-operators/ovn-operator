/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//
// Generated by:
//
// operator-sdk create webhook --group ovn --version v1beta1 --kind OVNNorthd --programmatic-validation --defaulting
//

package v1beta1

import (
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
	"k8s.io/apimachinery/pkg/util/validation/field"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// OVNNorthdDefaults -
type OVNNorthdDefaults struct {
	ContainerImageURL string
	ExporterImageURL  string
}

var ovnNorthdDefaults OVNNorthdDefaults

// log is for logging in this package.
var ovnnorthdlog = logf.Log.WithName("ovnnorthd-resource")

// SetupOVNNorthdDefaults - initialize OVNNorthd spec defaults for use with either internal or external webhooks
func SetupOVNNorthdDefaults(defaults OVNNorthdDefaults) {
	ovnNorthdDefaults = defaults
	ovndbclusterlog.Info("OVNNorthd defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *OVNNorthd) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-ovn-openstack-org-v1beta1-ovnnorthd,mutating=true,failurePolicy=fail,sideEffects=None,groups=ovn.openstack.org,resources=ovnnorthds,verbs=create;update,versions=v1beta1,name=movnnorthd.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &OVNNorthd{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *OVNNorthd) Default() {
	ovnnorthdlog.Info("default", "name", r.Name)

	r.Spec.Default()
}

// Default - set defaults for this OVNNorthd spec
func (spec *OVNNorthdSpec) Default() {
	if spec.ContainerImage == "" {
		spec.ContainerImage = ovnNorthdDefaults.ContainerImageURL
	}
	if spec.ExporterImage == "" {
		spec.ExporterImage = ovnNorthdDefaults.ExporterImageURL
	}
	spec.OVNNorthdSpecCore.Default()
}

// Default - set defaults for this OVNNorthd core spec (this version is called by OpenStackControlplane webhooks)
func (spec *OVNNorthdSpecCore) Default() {
	// nothing here yet
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-ovn-openstack-org-v1beta1-ovnnorthd,mutating=false,failurePolicy=fail,sideEffects=None,groups=ovn.openstack.org,resources=ovnnorthds,verbs=create;update,versions=v1beta1,name=vovnnorthd.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &OVNNorthd{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *OVNNorthd) ValidateCreate() (admission.Warnings, error) {
	ovnnorthdlog.Info("validate create", "name", r.Name)

	errors := field.ErrorList{}
	basePath := field.NewPath("spec")

	// When a TopologyRef CR is referenced, fail if a different Namespace is
	// referenced because is not supported
	errors = append(errors, r.Spec.ValidateTopology(basePath, r.Namespace)...)

	if len(errors) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "ovn.openstack.org", Kind: "OVNNorthd"},
			r.Name, errors)
	}
	return nil, nil
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *OVNNorthd) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	ovnnorthdlog.Info("validate update", "name", r.Name)

	errors := field.ErrorList{}
	basePath := field.NewPath("spec")

	// When a TopologyRef CR is referenced, fail if a different Namespace is
	// referenced because is not supported
	errors = append(errors, r.Spec.ValidateTopology(basePath, r.Namespace)...)

	if len(errors) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "ovn.openstack.org", Kind: "OVNNorthd"},
			r.Name, errors)
	}
	return nil, nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *OVNNorthd) ValidateDelete() (admission.Warnings, error) {
	ovnnorthdlog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil, nil
}
