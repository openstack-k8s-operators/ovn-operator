#
# Check for:
#
# - 1 OVNNorthd CR
# - 2 OVNDBCluster CR (ovndbcluster-nb-sample, ovndbcluster-sb-sample)
# - 1 OVNController CR
# - Deployment with 1 Pod for OVNNorthd CR
# - Daemonset for OVNController CR
# - Daemonset for OVNControllerOVS CR
# - ovsdbserver-nb-0 Pod
# - ovsdbserver-sb-0 Pod
# - ovn-controller- Pod
# - ovn-controller-ovs- Pod
# - ovsdbserver-nb Service
# - ovsdbserver-nb-0 Service
# - ovsdbserver-sb Service
# - ovsdbserver-sb-0 Service
# - OVNController Daemonset created as many pods as nodes*2
# - OVNControllerOVS Daemonset created as many pods as nodes*2

apiVersion: ovn.openstack.org/v1beta1
kind: OVNNorthd
metadata:
  finalizers:
  - openstack.org/ovnnorthd
  name: ovnnorthd-sample
spec:
  logLevel: info
  replicas: 1
status:
  readyCount: 1
---
apiVersion: ovn.openstack.org/v1beta1
kind: OVNDBCluster
metadata:
  finalizers:
  - openstack.org/ovndbcluster
  name: ovndbcluster-nb-sample
spec:
  dbType: NB
  logLevel: info
  replicas: 1
  storageRequest: 10G
status:
  readyCount: 1
---
apiVersion: ovn.openstack.org/v1beta1
kind: OVNDBCluster
metadata:
  finalizers:
  - openstack.org/ovndbcluster
  name: ovndbcluster-sb-sample
spec:
  dbType: SB
  logLevel: info
  replicas: 1
  storageRequest: 10G
status:
  readyCount: 1
---
apiVersion: ovn.openstack.org/v1beta1
kind: OVNController
metadata:
  finalizers:
  - openstack.org/ovncontroller
  name: ovncontroller-sample
spec:
  external-ids:
    ovn-bridge: br-int
    ovn-encap-type: geneve
    system-id: random
status:
  conditions:
  - message: Setup complete
    reason: Ready
    status: "True"
    type: Ready
  - message: Deployment completed
    reason: Ready
    status: "True"
    type: DeploymentReady
  - message: Input data complete
    reason: Ready
    status: "True"
    type: InputReady
  - message: NetworkAttachments completed
    reason: Ready
    status: "True"
    type: NetworkAttachmentsReady
  - message: RoleBinding created
    reason: Ready
    status: "True"
    type: RoleBindingReady
  - message: Role created
    reason: Ready
    status: "True"
    type: RoleReady
  - message: ServiceAccount created
    reason: Ready
    status: "True"
    type: ServiceAccountReady
  - message: Service config create completed
    reason: Ready
    status: "True"
    type: ServiceConfigReady
  - message: Input data complete
    reason: Ready
    status: "True"
    type: TLSInputReady
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ovn-northd
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: ovn-northd
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - ovn-northd
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - command:
        - /usr/bin/ovn-northd
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
              - /usr/local/bin/container-scripts/status_check.sh
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
        name: ovn-northd
        readinessProbe:
          exec:
            command:
              - /usr/local/bin/container-scripts/status_check.sh
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
      serviceAccount: ovnnorthd-ovnnorthd-sample
      serviceAccountName: ovnnorthd-ovnnorthd-sample
      restartPolicy: Always
status:
  availableReplicas: 1
  replicas: 1
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ovn-controller
status:
  numberMisscheduled: 0
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ovn-controller-ovs
status:
  numberMisscheduled: 0
---
# the openshift annotations can't be checked through the deployment above
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: restricted-v2
  labels:
    service: ovn-northd
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: restricted-v2
  labels:
    service: ovsdbserver-nb
  name: ovsdbserver-nb-0
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: restricted-v2
  labels:
    service: ovsdbserver-sb
  name: ovsdbserver-sb-0
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: privileged
  labels:
    service: ovn-controller
  generateName: ovn-controller-
status:
  phase: Running
  containerStatuses:
    - name: ovn-controller
      ready: true
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: privileged
  labels:
    service: ovn-controller-ovs
  generateName: ovn-controller-ovs-
status:
  phase: Running
  containerStatuses:
    - name: ovs-vswitchd
      ready: true
    - name: ovsdb-server
      ready: true
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ovsdbserver-nb
  name: ovsdbserver-nb
spec:
  ports:
    - name: north-raft
      port: 6643
      protocol: TCP
      targetPort: 6643
  selector:
    service: ovsdbserver-nb
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ovsdbserver-nb
    statefulset.kubernetes.io/pod-name: ovsdbserver-nb-0
  name: ovsdbserver-nb-0
spec:
  ports:
    - name: north
      port: 6641
      protocol: TCP
      targetPort: 6641
    - name: north-raft
      port: 6643
      protocol: TCP
      targetPort: 6643
  selector:
    service: ovsdbserver-nb
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ovsdbserver-sb
  name: ovsdbserver-sb
spec:
  ports:
    - name: south-raft
      port: 6644
      protocol: TCP
      targetPort: 6644
  selector:
    service: ovsdbserver-sb
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ovsdbserver-sb
    statefulset.kubernetes.io/pod-name: ovsdbserver-sb-0
  name: ovsdbserver-sb-0
spec:
  ports:
    - name: south
      port: 6642
      protocol: TCP
      targetPort: 6642
    - name: south-raft
      port: 6644
      protocol: TCP
      targetPort: 6644
  selector:
    service: ovsdbserver-sb
  type: ClusterIP
---
# check that the number of ovn-controller pods is the same  as the number of
# worker nodes in the cluster
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
    - script: |
        num_nodes=$(oc get nodes -l node-role.kubernetes.io/worker -o name | wc -l)
        # check the number of ovn-controller* pods that are running
        num_pods_ovn=$(oc get pods -n $NAMESPACE -l service=ovn-controller -o name --field-selector=status.phase=Running | wc -l)
        num_pods_ovs=$(oc get pods -n $NAMESPACE -l service=ovn-controller-ovs -o name --field-selector=status.phase=Running | wc -l)
        num_pods=$(( num_pods_ovn + num_pods_ovs))
        # for each nodes, two pods are spawned - ovn-controller and ovn-controller-ovs
        if [ "$((num_nodes * 2))" -ne "$num_pods" ]; then
          echo "Cluster has $num_nodes nodes but OVNController spawned $num_pods pods, it should have $num_nodes * 2"
          exit 1
        fi

        tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
        imageTuples=$(oc get -n openstack-operators deployment ovn-operator-controller-manager -o go-template="$tupleTemplate")
        for ITEM in $(echo $imageTuples); do
          # it is an image
          if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
            NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_OVN_\(.*\)_IMAGE.*|\1|')
            IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
            template='{{.spec.containerImage}}'
            case $NAME in
              NB_DBCLUSTER)
                SERVICE_IMAGE=$(oc get -n $NAMESPACE ovndbcluster ovndbcluster-nb-sample -o go-template="$template")
                ;;
              SB_DBCLUSTER)
                SERVICE_IMAGE=$(oc get -n $NAMESPACE ovndbcluster ovndbcluster-sb-sample -o go-template="$template")
                ;;
              NORTHD)
                SERVICE_IMAGE=$(oc get -n $NAMESPACE ovnnorthd ovnnorthd-sample -o go-template="$template")
                ;;
              CONTROLLER)
                SERVICE_IMAGE=$(oc get -n $NAMESPACE ovncontroller ovncontroller-sample -o go-template="{{.spec.ovnContainerImage}}")
                ;;
              CONTROLLER_OVS)
                SERVICE_IMAGE=$(oc get -n $NAMESPACE ovncontroller ovncontroller-sample -o go-template="{{.spec.ovsContainerImage}}")
                ;;
            esac
            if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
                    echo "$NAME image ($SERVICE_IMAGE) does not equal $IMG_FROM_ENV"
              exit 1
            fi
          fi
        done

        exit 0
    - script: |
        controller_pod=$(oc get pod -n $NAMESPACE -l service=ovn-controller -o name|head -1)
        host=$(oc rsh -n $NAMESPACE ${controller_pod} ovs-vsctl get open . external_ids:hostname)

        sb_pod=$(oc get pod -n $NAMESPACE -l service=ovsdbserver-sb -o name|head -1)
        oc rsh -n $NAMESPACE ${sb_pod} ovn-sbctl list chassis | grep -q ${host} || exit 1
        exit 0
